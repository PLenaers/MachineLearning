?mtcars
levels(mtcars$am)
mtcars$am=automatic
mtcars$am="automatic"
mtcars$mpg[mtcars$am="automatic"]
lma <- lm(mtcars$mpg[mtcars$am=="automatic"] ~ mtcars$wt[mtcars$am=="automatic"])
lmm <- lm(mtcars$mpg[mtcars$am=="manual"] ~ mtcars$wt[mtcars$am=="manual"])
mtcars$mpg[mtcars$am=="manual"]
mtcars$mpg[mtcars$am=="automatic"]
mtcars$mpg
mtcars
mtcars
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) = c("automatic", "manual")
fit1 <- lm(mpg ~ am, mtcars)
fit2 <- lm(mpg ~ am + wt, mtcars)
fit3 <- lm(mpg ~ am + wt + wt*am, mtcars)
fit4 <- lm(mpg ~ am + wt + wt*am + hp, mtcars)
fit5 <- lm(mpg ~ am + wt + wt*am + hp + disp, mtcars)
fit1$coef
fit2$coef
fit3$coef
anova(fit1, fit2, fit3, fit4, fit5)
cor1 <- cor(mtcars$wt, mtcars$hp)
cor2 <- cor(mtcars$wt, mtcars$disp)
mtcars$am
mtcars$mpg[mtcars$am=="manual"]
mtcars$mpg[mtcars$am=="automatic"]
lma <- lm(mtcars$mpg[mtcars$am=="automatic"] ~ mtcars$wt[mtcars$am=="automatic"])
lmm <- lm(mtcars$mpg[mtcars$am=="manual"] ~ mtcars$wt[mtcars$am=="manual"])
plot(mtcars$wt,mtcars$mpg,pch=19)
points(mtcars$wt,mtcars$mpg,pch=19,col=((mtcars$am=="manual")*1+1))
lines(mtcars$wt[mtcars$am=="manual"],lmm$fitted,col="black",lwd=3)
lines(mtcars$wt[mtcars$am=="manual"],lmm$fitted,col="red",lwd=3)
lines(mtcars$wt[mtcars$am=="automatic"],lmm$fitted,col="black",lwd=3)
lines(mtcars$wt[mtcars$am=="automatic"],lma$fitted,col="black",lwd=3)
lmBoth <- lm(mtcars$mpg ~ mtcars$wt + mtcars$am + mtcars$am*mtcars$wt)
plot(mtcars$wt,mtcars$mpg,pch=19)
points(mtcars$wt,mtcars$mpg,pch=19,col=((mtcars$am=="manual")*1+1))
abline(c(lmBoth$coeff[1],lmBoth$coeff[2]),col="red",lwd=3)
abline(c(lmBoth$coeff[1],lmBoth$coeff[2]),col="black",lwd=3)
abline(c(lmBoth$coeff[1] + lmBoth$coeff[3],lmBoth$coeff[2] +lmBoth$coeff[4]),col="red",lwd=3
)
lmBoth$coef
fit3$coef
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) = c("automatic", "manual")
tapply(mtcars$mpg ~ mtcars$am, mean)
?tapply
tapply(mtcars$mpg, mtcars$am, mean)
plot(fit3)
pairs(mtcars)
?pairs
pairs(mtcars$mpg, mtcars$wt, mtcars$am)
pairs(mtcars$mpg + mtcars$wt + mtcars$am)
pairs(mtcars, mpg, wt, am)
pairs(mtcars, mpg, wt)
pairs(mtcars, c(mpg, wt))
pairs(~mpg+am+wt,data=mtcars,
)
pairs(~mpg+am+wt+hp+disp,data=mtcars)
?pairs
plot(fit3, which=1)
plot(fit3, which=2)
mtcars
plot(fit5, which=1)
plot(fit5, which=2)
plot(fit4, which=2)
fit6 <- lm(mpg ~., mtcars)
plot(fit6, which=2)
hatvalues(fit3)
order(hatvalues(fit3))
hatvalues(order(hatvalues(fit3)))
plot(hatvalues(fit3))
dfbetas(fit3)
plot(predict(fit3), resid(fit3))
?hatvalues
hatvalues(fit3)
mtcars
?which
?which.max(hatvalues(fit3))
which.max(hatvalues(fit3))
library(mass)
library("mass")
install.package("mass")
install.packages("mass")
install.packages("MASS")
library(mass)
library(MASS)
?shuttle
summary(shuttle)
fit <- glm(use ~ wind, data=shuttle)
fit <- lm(use ~ wind, data=shuttle)
str(shuttle)
fit <- glm(as.numeric(use) ~ as.numeric(wind), data=shuttle)
summary(fit)
exp(-0.007812)
fit2 <- glm(as.numeric(use) ~ as.numeric(wind) + as.numeric(magn), data=shuttle)
summary(fit2)
exp(0.014063)
library(InsectSprays)
summary(InsectSprays)
InsectSprays
glm1 <- glm(count ~ spray, data = InsectSprays, family="poisson")
summary(glm1)
glm2 <- glm(count -1 ~ spray, data = InsectSprays, family="poisson")
glm2 <- glm(count ~ spray - 1, data = InsectSprays, family="poisson")
summary(glm2)
2.67415/2.73003
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot = 0;
knots = 0;
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
xMat<-cbind(1,x,splineTerms)
yhat<-predict(lm(y~xMat-1))
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
summary(lm(y~xMat-1))
-1.02416 + 2.03723
?mtcars
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) = c("automatic", "manual")
means <- round(tapply(mtcars$mpg, mtcars$am, mean),2)
fit1 <- lm(mpg ~ ., mtcars)
fit2 <- lm(mpg ~ am + wt + qsec, mtcars)
summary(fit2)
anova(fit1, fit2)
maxhat <- max(hatvalues(fit2))
hatvalues(fit2)
plot(fit2)
summary(fit2)
fit3 <- lm(mpg ~ am*wt*qsec, mtcars)
summary(fit3)
fit3 <- lm(mpg ~ am*wt + qsec, mtcars)
summary(fit3)
cor(mtcars$am, mtcars$wt)
cor(as.numeric(mtcars$am), mtcars$wt)
cor(mtcars$qsec, mtcars$wt)
mean(mtcars$qsec)
plot(mtcars$wt,mtcars$mpg,pch=19, main="mpg vs weight", xlab="Weight", ylab="mpg")
points(mtcars$wt,mtcars$mpg,pch=19,col=((mtcars$am=="manual")*1+1))
abline(c(fit3$coeff[1],fit3$coeff[3]),col="black",lwd=3)
fit3 <- lm(mpg ~ am + wt + wt*am, mtcars)
plot(mtcars$wt,mtcars$mpg,pch=19, main="mpg vs weight", xlab="Weight", ylab="mpg")
points(mtcars$wt,mtcars$mpg,pch=19,col=((mtcars$am=="manual")*1+1))
abline(c(fit3$coeff[1],fit3$coeff[3]),col="black",lwd=3)
?abline
abline(c(fit2$coef[1]+fit2$coef[3]*mean(mtcars$qsec), fit2$coef[2]), col="red", lwd=2)
summary(fit2)
abline(c(fit2$coef[1]+fit2$coef[4]*mean(mtcars$qsec), fit2$coef[3]), col="red", lwd=2)
fit3 <- lm(mpg ~ am + wt + wt*am, mtcars)
plot(mtcars$wt,mtcars$mpg,pch=19, main="mpg vs weight", xlab="Weight", ylab="mpg")
points(mtcars$wt,mtcars$mpg,pch=19,col=((mtcars$am=="manual")*1+1))
abline(c(fit3$coeff[1] + fit3$coeff[2],fit3$coeff[3] + fit3$coeff[4]),col="red",lwd=3)
abline(c(fit2$coeff[1] + fit2$coeff[2] + fit2$coef[4]*mean(mtcars$qsec),fit2$coeff[3] + fit2$coeff[4]),col="black",lwd=2)
fit3 <- lm(mpg ~ am + wt + wt*am, mtcars)
fit2$coef
fit3$coef
round(dfbetas(fit2),3)
max(abs(round(dfbetas(fit2),3)))
round(hatvalues(fit2),3)
max(round(hatvalues(fit2),3))
fit4 <- lm(mpg ~., data=mtcars)
plot(fit4)
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit4)
install.packages("caret")
library(AppliedPredictiveModeling)
install.packages("library(AppliedPredictiveModeling)")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(concrete)
hist(concrete$Superplasticizer)
summary(concrete$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
grep("^[IL]", names(AlzheimerDisease), value=TRUE)
str(AlzheimerDisease)
grep("^[IL]", names(training), value=TRUE)
grep("IL", names(training), value=TRUE)
grep("^IL", names(training), value=TRUE)
data <- training[,grep("^IL", names(training), value=TRUE)]
str(data)
prComp <- prcomp(data)
?prComp
?prcomp
prComp
preProc <- preProcess(data,method="pca",pcaComp=7)
trainPC <- predict(preProc, data)
trainData <- training[,c("diagnosis",grep("^IL", names(training), value=TRUE))]
str(trainData)
preProc <- preProcess(traindata,method="pca",pcaComp=7)
> trainPC <- predict(preProc, traindata)
preProc <- preProcess(trainData,method="pca",pcaComp=7)
> trainPC <- predict(preProc, trainData)
preProc <- preProcess(trainData,method="pca",pcaComp=7)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam(inTrain)
training <- spam[inTrain,]
test <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
str(training)
preProc <- preProcess(traindata[-1,],method="pca",pcaComp=7)
preProc <- preProcess(trainData[,-1],method="pca",pcaComp=7)
str(trainData)
trainData[,-1]
preProc <- preProcess(trainData[,-1],method="pca",pcaComp=7)
trainPC <- predict(preProc, trainData[,-1])
modelFit <- train(trainData$diagnosis ~ ., method="glm", data=trainPC)
str(trainData)
install.packages("e1071")
modelFit <- train(trainData$diagnosis ~ ., method="glm", data=trainPC)
testPC <- predict(preProc, trainData[,-1])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
modelFit
testData <- testing[,c("diagnosis",grep("^IL", names(testing), value=TRUE))]
testPC <- predict(preProc, testData[,-1])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
?preprocess
?preproc
?preProcess
preProc
modelFit
?train
preProc <- preProcess(trainData[,-1],method="pca",pcaComp=8)
trainPC <- predict(preProc, trainData[,-1])
modelFit <- train(trainData$diagnosis ~ ., method="glm", data=trainPC)
modelFit
testData <- testing[,c("diagnosis",grep("^IL", names(testing), value=TRUE))]testPC <- predict(preProc, testData[,-1])
> confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
testData <- testing[,c("diagnosis",grep("^IL", names(testing), value=TRUE))]
testPC <- predict(preProc, testData[,-1])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(trainData[,-1],method="pca",pcaComp=10)
trainPC <- predict(preProc, trainData[,-1])
modelFit <- train(trainData$diagnosis ~ ., method="glm", data=trainPC)
modelFit
testPC <- predict(preProc, testData[,-1])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(trainData[,-1],method="pca",pcaComp=11)
testPC <- predict(preProc, testData[,-1])
modelFit <- train(trainData$diagnosis ~ ., method="glm", data=trainPC)
modelFit
testPC <- predict(preProc, testData[,-1])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
modelFit <- train(diagnosis~., method="glm", preProcess="pca", data=trainData)
confusionMatrix(testData$diagnosis, predict(modelFit,testData))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train(diagnosis~., method="glm", data=trainData)
confusionMatrix(testData$diagnosis, predict(modelFit,testData))
preProc <- preProcess(trainData[,-1],method="pca",pcaComp=9)
trainPC <- predict(preProc, trainData[,-1])
plot(trainData[,1],trainData[,2], col=typeColor)
plot(trainData[,1],trainData[,2])
modelFit <- train(trainData$diagnosis ~ ., method="glm", data=trainPC)
modelFit
testPC <- predict(preProc, testData[,-1])
confusionMatrix(testData$diagnosis, predict(modelFit,testPC))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages(caret)
install.packages("caret")
install.packages("caret")
install.packages(c("boot", "codetools", "colorspace", "devtools", "evaluate", "formatR", "ggplot2", "highr", "jsonlite", "knitr", "lattice", "manipulate", "markdown", "Matrix", "memisc", "mgcv", "mime", "plyr", "quantmod", "Rcpp", "RCurl", "RMySQL", "roxygen2", "rstudioapi", "stringr", "testthat", "XML", "zoo"))
install.packages(c("boot", "codetools", "colorspace", "devtools", "evaluate", "formatR", "ggplot2", "highr", "jsonlite", "knitr", "lattice", "manipulate", "markdown", "Matrix", "memisc", "mgcv", "mime", "plyr", "quantmod", "Rcpp", "RCurl", "RMySQL", "roxygen2", "rstudioapi", "stringr", "testthat", "XML", "zoo"))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training = segmentationOriginal[inTrain,]
test = segmentationOriginal[-inTrain,]
dim(training)
dim(test)
modFit <- train(Case ~ ., method="rpart", data=training)
set.Seed(125)
setSeed(125)
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$FinalModel)
print(modFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
?fancyRpartplot
?fancyRpartPlot
library(rattle)
fancyRpartPlot(modFit$finalModel)
testing
test
str(test)
str(test$Case)
str(test$Class)
training = segmentationOriginal[segmentationOriginal$Case==1]
training <- segmentationOrignial[ which(segmentationOriginal$Case==1, ]
training <- segmentationOrignial[ which(segmentationOriginal$Case==1), ]
training <- segmentationOriginal[ which(segmentationOriginal$Case==1), ]
which(segmentationOriginal$Case==1)
which(segmentationOriginal$Case=="1")
str(segmentationOriginal$Case)
which(segmentationOriginal$Case=="Test")
testing <- segmentationOriginal[ which(segmentationOriginal$Case=="Test"), ]
training <- segmentationOriginal[ which(segmentationOriginal$Case=="Train"), ]
modFit <- train(Class ~ ., method="rpart", data=training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
modFit <- train(Class ~ ., method="rpart", data=training)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ ., method="rpart", data=training)
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
fancyRpartPlot(modFit$finalModel)
?predict
predict(modFit, newdata)
str(olive)
summary(olive$Area)
olive$Area
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(SAheart)
fit <- lm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data="SAheart")
?lm
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data="SAheart")
?glm
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial", data="SAheart")
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data="SAheart")
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data="SAheart")
fit <- glm(chd ~ age, data="SAheart")
fit <- glm(chd ~ age, data=SAheart)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=SAheart)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family=binomial, data=SAheart)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family=binomial(), data=SAheart)
fit <- glm(chd ~ age + alcohol, data=SAheart)
fit <- glm(chd ~ age + alcohol + obesity + tobacoo + typea + ldl, data=SAheart)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart, family=binomial)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(train)
missClass(train, predict(newdata?train))
missClass(train, predict(newdata,train))
predict(train)
predict(fit, newdata=train)
fit
train
test
testing
testSA
predict(fit, newdata=testSA)
missClass(train, predict(fit,newdata=trainSA))
missClass(trainSA, predict(fit,newdata=trainSA))
missClass(testSA, predict(fit,newdata=testSA))
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart, family=binomial, method=glm)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart, family=binomial, method="glm")
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=SAheart, family=binomial)
204.5/462
str(trainSA)
missClass(testSA$chd, predict(fit,newdata=testSA))
missClass(trainSA$chd, predict(fit,newdata=trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.train)
set.seed(33833)
library(caret)
modFit <- train(y ~ ., data=vowel.train, method="rf", prox=TRUE)
modFit <- train(y ~ ., data=vowel.train, method="rf", prox=TRUE)
?varlmp
?varImp
varImp(modFit)
getTree(modFit$finalModel,k=2)
fancyRpartModel(modFit$finalModel)
library(rattle)
fancyRpartModel(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
varImp(modFit)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(SAheart)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family=binomial)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, predict(fit, trainSA))
predict(fit, trainSA)
missClass(trainSA$chd, predict(fit,newdata=trainSA))
missClass(testSA$chd, predict(fit,newdata=testSA))
summary(fit)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family=binomial)
summary(fit)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family=binomial, method=glm)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family=binomial)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
setwd("~/Google Drive/Work/Coursera/Data Science/08 - Machine Learning/Project")
testing = read.csv2("pml-testing.csv", sep=",", stringsAsFactors=FALSE)
training = read.csv2("pml-training.csv", sep=",", stringsAsFactors=FALSE)
library(doParallel)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
library(caret)
library(rattle)
library(rpart)
newdata <- training[,grep("^pitch|^roll|^yaw|^classe|^gyros|^accel", names(training))]
myvars <- c("roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "classe")
newdata <- training[,myvars]
set.seed(1234)
inTrain <- createDataPartition(newdata$classe, p=0.50, list=FALSE)
myTraining <- newdata[inTrain,]
myTesting <- newdata[-inTrain,]
modFit <- train(classe ~ ., method = "rpart", data=myTraining)
newdata <- training[,grep("^classe|^gyros|^accel", names(training))]
set.seed(1234)
inTrain <- createDataPartition(newdata$classe, p=0.10, list=FALSE)
myTraining <- newdata[inTrain,]
myTesting <- newdata[-inTrain,]
modFit <- train(classe ~ ., method = "rpart", data=myTraining)
newdata <- training[training==""] <- NA
dim(newdata)
newdata <- training
newdata[newdata==""] <- NA
dim(newdata)
newdata <- newdata[, colSums(is.na(newdata)) == 0]
names(newdata)
set.seed(1234)
inTrain <- createDataPartition(newdata$classe, p=0.10, list=FALSE)
myTraining <- newdata[inTrain,]
myTesting <- newdata[-inTrain,]
modFit <- train(classe ~ ., method = "rpart", data=myTraining)
